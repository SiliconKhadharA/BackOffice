@page "/Admin-Users"
@inject AdminUserService AdminUserService
@rendermode InteractiveServer
@using System.Threading.Tasks
@using Infrastructure.AdminUserService
@attribute [StreamRendering]

<h3>Admin Users</h3>


@if (adminUsers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th>Full Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in adminUsers)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.FullName</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditUser(user.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-success" @onclick="AddUser">Add New Admin</button>
}
@code {
    private List<AdminUserEntity>? adminUsers;

    protected override async Task OnInitializedAsync()
    {
        adminUsers = await AdminUserService.GetAdminUsersAsync();
    }

    private void EditUser(string id)
    {
        // Navigate to the Edit page
        NavigationManager.NavigateTo($"/edit-admin-user/{id}");
    }

    private void AddUser()
    {
        // Navigate to the Add page
        NavigationManager.NavigateTo("/add-admin-user");
    }

    private async Task DeleteUser(string id)
    {
        await AdminUserService.DeleteAdminUserAsync(id);
        adminUsers = await AdminUserService.GetAdminUsersAsync();
    }
}
