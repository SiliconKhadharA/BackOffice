@page "/edit-course/{CourseId}"
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Edit Course</h3>

@if (course == null)
{
    <p><em>Loading.......</em></p>
}
else
{
    <div class="form-group">
        <label for="title">Title:</label>
        <input type="text" id="title" @bind="course.Title" class="form-control" />
    </div>
    <div class="form-group">
        <label for="imageUri">Image URI:</label>
        <input type="text" id="imageUri" @bind="course.ImageUri" class="form-control" />
    </div>
    <div class="form-group">
        <label for="likes">Likes:</label>
        <input type="number" id="likes" @bind="course.Likes" class="form-control" />
    </div>
    <div class="form-group">
        <label for="hours">Hours:</label>
        <input type="number" id="hours" @bind="course.Hours" class="form-control" />
    </div>
    <div class="form-group">
        <label for="authors">Authors:</label>
        @foreach (var author in course.Authors)
        {
            <input type="text" @bind="author.Name" class="form-control mb-2" />
        }
        <button class="btn btn-secondary" @onclick="AddAuthor">Add Author</button>
    </div>
    <button class="btn btn-primary" @onclick="UpdateCourse">Save</button>
}

@code {
    [Parameter]
    public string CourseId { get; set; } = null!;
    private SingleCourseModel? course;

    protected override async Task OnInitializedAsync()
    {
        course = await FetchCourseByIdAsync(CourseId);
    }

    private async Task<SingleCourseModel?> FetchCourseByIdAsync(string courseId)
    {
        try
        {
            var query = new GraphQLQuery
                {
                    Query = @"query ($id: String!) { getCoursesById(id: $id) { id title imageUri likes hours authors { name } } }",
                    Variables = new { id = courseId }
                };
            var response = await Http.PostAsJsonAsync("http://localhost:7186/api/graphql", query);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
                if (result?.Data != null)
                {
                    var course = result.Data.GetProperty("getCoursesById");
                    var courseModel = new SingleCourseModel
                        {
                            Id = course.GetProperty("id").GetString()!,
                            Title = course.GetProperty("title").GetString(),
                            ImageUri = course.GetProperty("imageUri").GetString(),
                            Likes = course.GetProperty("likes").GetString(),
                            Hours = course.GetProperty("hours").GetInt32(),
                            Authors = course.GetProperty("authors").EnumerateArray()
                                        .Select(a => new AuthorModel { Name = a.GetProperty("name").GetString() }).ToList(),
                        };
                    return courseModel;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        return null;
    }

    private async Task UpdateCourse()
    {
        if (course == null) return;

        var authors = course.Authors.Select(a => new  { Name = a.Name }).ToList();

        var updateRequest = new 
            {
                Id = course.Id,
                Title = course.Title,
                ImageUri = course.ImageUri,
                Likes = course.Likes,
                Hours = course.Hours,
                Authors = authors
            };

        var query = new GraphQLQuery
            {
                Query = @"
            mutation ($input: CourseUpdateRequestInput!) {
                updateCourse(request: $input) {
                    id
                }
            }",
                Variables = new { input = updateRequest }
            };

        // Debug output of the request payload
        var payload = System.Text.Json.JsonSerializer.Serialize(query);
        Console.WriteLine($"GraphQL Payload: {payload}");

        var response = await Http.PostAsJsonAsync("http://localhost:7186/api/graphql", query);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/courses");
        }
        else
        {
            // Handle error
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to update course: {errorContent}");
        }
    }

    private void AddAuthor()
    {
        if (course == null) return;
        course.Authors.Add(new AuthorModel());
    }
}
